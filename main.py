# Importerar bibliotek, numpy f√∂r numeriska operationer, pandas f√∂r datahantering och random f√∂r slumpm√§ssiga val.
import numpy as np
import pandas as pd
import random


# Funktion f√∂r att skriva ut en seperator f√∂r att f√• det visuellt snyggare.
def print_separator(title=None):
    # Skriver ut separatorn med titeln centrerad, placerad mellan 10 st = p√• var sida.
    print(f"\n{'=' * 10} {title} {'=' * 10}\n")


# Funktion f√∂r att sl√• om t√§rningarna.
def roll_dices(dice_values, reroll_indices):
    # Uppdaterar v√§rdena f√∂r de t√§rningarna som ska sl√•s om
    dice_values[reroll_indices] = np.random.randint(1, 7, size=len(reroll_indices))
    # Returnerar den nya listan med t√§rningsv√§rden.
    return dice_values


# Funktion f√∂r att r√§kna ut rundans po√§ng.
def calculate_round_score(dice_values, target_number):
    # Kontrollerar om spelaren har f√•tt yatzy, och i s√•dana fall returnerar 50 po√§ng.
    if target_number == 'Yatzy' and np.all(dice_values == dice_values[0]):
        return 50
    # Ber√§knar och returnerar po√§ngen baserat p√• m√•lnumret och att det inte √§nr yatzy.
    elif target_number != 'Yatzy':
        return np.sum(dice_values == target_number) * target_number
    # Returnerar noll po√§ng om inget av de ovanst√•ende st√§mmer.
    return 0


# Funktion f√∂r en spelares runda.
def player_round(player_name, used_categories):
    # Skriver ut spelarens tur med namn.
    print_separator(f"{player_name}'s Turn")
    # Sl√•r fem t√§rningar med v√§rde 1-6.
    dice_values = np.random.randint(1, 7, size=5)
    # Visar v√§rdet f√∂r de fem t√§rningarna.
    print(f"Initial roll: {dice_values}")

    # L√•ter spelaren sl√• om t√§rningar upp till tv√• g√•nger.
    for attempt in range(2):
        # Spelaren f√• ange index p√• de t√§rningarna de vill sl√• om.
        reroll_input = input("Enter the indices of dice to reroll (0-4), separate by spaces, or press enter to keep: ")

        # Om spelaren trycker p√• enter s√• g√•r spelet vidare.
        if reroll_input.strip() == '':
            break

        # Skapar en lista med index f√∂r de t√§rningarna som ska sl√•s om.
        reroll_indices = [int(index) for index in reroll_input.split() if index.isdigit() and 0 <= int(index) < 5]

        # Kontrollerar om alla angivna index √§r giltiga.
        if len(reroll_indices) != len(reroll_input.split()):
            # Felmeddelande om det angetts n√•got annat √§n de index (0-4) som g√•r att v√§lja p√•.
            print("Invalid choice detected. Please enter indices between 0 and 4 only.")
            continue

        # Sl√•r om de valda t√§rningarna.
        dice_values = roll_dices(dice_values, np.array(reroll_indices))
        # Visar det nya resultatet.
        print(f"New roll: {dice_values}")

    # Kontrollerar om spelaren f√•tt yatzy.
    if np.all(dice_values == dice_values[0]):
        # Skriver ut att spelaren f√•tt yatzy.
        print("üé≤ Yatzy Explosion! Pure Dice Domination!")
        # Returnerar 50 po√§ng till yatzy-kategorin.
        return 50, 'Yatzy'

    # Kontrollerar om antalet anv√§nda kategorier √§n mindre √§n 6.
    if len(used_categories) < 6:
        # Om det finns kategorier kvar att v√§lja, s√• forts√§tter den.
        while True:
            try:
                # Ber spelaren att v√§lja en kategori mellan 1 och 6.
                target_number = int(input("Choose your scoring category (1-6): "))
                # Kontrollerar om den valda kategorin redan har valts.
                if target_number in used_categories:
                    # Meddelar spelaren att kategorin redan anv√§nts, och ber den att v√§lja en annan.
                    print("You already used that category. Please choose a different category.")
                # Kontrollerar om den angivna valet √§r till√•tet (mellan 1 och 6).
                elif 1 <= target_number <= 6:
                    # Bryter loopen om det √§r ett giltigt val.
                    break
                else:
                    # Meddelar spelaren om att v√§lja ett nummer inom det giltiga intervallet om valet ligger utanf√∂r.
                    print("Please choose a valid category between 1 and 6.")
            # Hanterar fall d√§r inmatningen inte √§r ett heltal.
            except ValueError:
                # Meddelar spelaren om att den m√•ste ange ett nummer.
                print("Invalid input. Please enter a number.")
    else:
        # Om alla kategorier redan anv√§nts, s√• vals yatzy som sista kategorin.
        target_number = 'Yatzy'

    # Ber√§knar och returnerar po√§ngen f√∂r rundan baserat p√• vald kategori.
    round_score = calculate_round_score(dice_values, target_number)
    return round_score, target_number


# Huvudfunktionen f√∂r spelet.
def game():
    # V√§lkomstmeddelande, anv√§nder sig av separatorn f√∂r att det ska se snyggare ut.
    print_separator("Welcome to a different kind of Yatzy!")
    while True:
        try:
            # Fr√•gar efter antalet spelare, mellan 1 och 10.
            num_players = int(input("Enter the number of players (1-10): "))
            if 1 <= num_players <= 10:
                # Bryter loopen om det angivna talet √§r mellan 1 och 10.
                break
            else:
                # Ber en skriva ett tal mellan 1 och 10 om det angivna √§r utanf√∂r det giltiga intervallet.
                print("Please enter a number between 1 and 10.")
        # Hanterar fall d√§r inmatningen inte √§r ett heltal.
        except ValueError:
            # Meddelar spelaren om att den m√•ste ange ett nummer.
            print("Please enter a valid number.")

    # Skapar en lista med spelarnamn baserat p√• antal spelare.
    player_names = [input(f"Enter Player {i + 1}'s name: ") for i in range(num_players)]
    # G√∂r en dataframe f√∂r att h√•lla reda p√• po√§ngen, spelarnamn som kolumner och rundorna som rader.
    scores = pd.DataFrame(columns=player_names, index=list(range(1, 7)) + ['Yatzy'])
    scores.index.name = "Round"
    # Skapar en dictionary f√∂r att h√•lla reda p√• vilka kategorier varje spelare redan har anv√§nt.
    used_categories = {player: [] for player in player_names}

    # Skapar en lista med rundor, inklusive den sista rundan "yatzy".
    rounds = list(range(1, 7)) + ['Yatzy']
    for i, round_num in enumerate(rounds):
        # Om det √§r rundan f√∂r yatzy --
        if round_num == 'Yatzy':
            # -- s√• skrivs det ut som "Final Round". (Fick d√∂pa om det fr√•n yatzy round med tanke p√• att man redan kan ha f√•tt yatzy och d√• ska ha n√•got annat)
            round_display = "Final Round!"
        else:
            # anger vilken runda det spelas.
            round_display = f"Round {round_num}"
        # Skriver ut vilken runda det √§r med hj√§lp av separatorn f√∂r att g√∂ra det lite snyggare.
        print_separator(round_display)
        # G√•r igenom samtliga spelare.
        for player_name in player_names:
            # Kallar p√• funktionen player_round f√∂r att spela rundan och returnerar po√§ng samt vald kategori.
            round_score, target_number = player_round(player_name, used_categories[player_name])
            # Kontrollerar om spelaren fick Yatzy och 50 po√§ng.
            if target_number == 'Yatzy' and round_score == 50:
                scores.loc['Yatzy', player_name] = 50
            else:
                # Om en annan kategori √§n Yatzy valdes, l√§ggs den till i listan √∂ver anv√§nda kategorier.
                if target_number != 'Yatzy':
                    used_categories[player_name].append(target_number)
                scores.loc[target_number, player_name] = round_score

    # Skriver ut den slutgiltiga po√§ngtavlan --
    print("\n\nFinal Scoreboard:")
    # -- med resultaten f√∂r varje runda.
    print(scores)
    # Ber√§knar totalpo√§ngen f√∂r varje spelare.
    total_scores = scores.sum()
    # Skriver ut totalpo√§ngen f√∂r varje spelare.
    print("\nTotal Scores:")
    # Konverterar po√§ngen till en str√§ng, s√• det blir enklare att l√§sa, samt snyggare presenterat.
    print(total_scores.to_string())

    # R√§knar ut vem som vunnit, baserat p√• h√∂gsta po√§ngen.
    max_score = total_scores.max()
    # Skapar en lista av spelarnamn som har uppn√•tt det h√∂gsta po√§ngv√§rdet, vilket kan inkludera flera spelare vid oavgjort.
    winners = total_scores[total_scores == max_score].index.tolist()

    # Olika gratulationsmeddelanden.
    congratulations_messages = [
        "\nüåü The stars aligned for you, {winner}! With {score} points, you've danced through the dice storm and emerged as the undisputed Yatzy Emperor. Long may you roll! üåü",
        "\nüöÄ {winner}, you've rocketed past the competition and landed squarely in the winner's circle with {score} points! Your dice-rolling skills are truly out of this world. üöÄ",
        "\nüé© Hats off to you, {winner}! With a magical score of {score} points, you've proven that luck is just skill in disguise. The wizardry of dice bends to your will! üé©",
        "\nüè∞ Against all odds, {winner} has stormed the castle and seized the throne with {score} points! All hail the new ruler of Yatzy Kingdom, where dice rule the land! üè∞",
        "\nüçÄ {winner}, it's not just luck‚Äîit's legend. With {score} points, you've rolled your way into the annals of Yatzy history. Let's carve your name on the high score tablet! üçÄ",
        "\nüéâ Confetti and cheers for {winner}, the Yatzy Maestro with {score} points! Your symphony of dice has played the sweetest victory tune. Encore! üéâ",
        "\nüî• {winner}, you've set the game ablaze with your fiery score of {score} points! Like a phoenix, you've risen from the ashes of chance to claim your victory. üî•",
        "\nüåà {winner}, you've captured the pot of gold at the end of the rainbow with {score} points! In the realm of Yatzy, you're the leprechaun that outsmarted luck itself. üåà",
        "\n‚öîÔ∏è In the epic saga of dice, {winner} has emerged as the hero of legend with {score} points! Your tale will be told across the lands, inspiring future generations of rollers. ‚öîÔ∏è",
        "\nüïµÔ∏è‚Äç‚ôÇÔ∏è Mystery solved, {winner}! With {score} points, you've uncovered the secret to ultimate Yatzy mastery. The game's afoot, and you're the detective who cracked the code! üïµÔ∏è‚Äç‚ôÇÔ∏è"
    ]

    # Hanterar oavgjort resultat.
    if len(winners) > 1:
        # Text d√§r alla som vunnit √§r inkluderade med namn och resultat.
        winners_text = ", ".join(winners[:-1]) + " and " + winners[-1]
        tie_message = f"\nIt's a tie! Congratulations to {winners_text} for scoring {max_score} points!"
        # Skriver ut gratulationsmeddelande f√∂r en oavgjord runda.
        print(tie_message)
    else:
        # V√§ljer slumpm√§ssigt ett gratulationsmeddelande fr√•n en lista och formaterar det med namnet och po√§ngen f√∂r den ensamma vinnaren.
        selected_message = random.choice(congratulations_messages).format(winner=winners[0], score=max_score)
        # Skriver ut det valda gratulationsmeddelandet till konsolen.
        print(selected_message)


game()
